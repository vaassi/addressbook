//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "contact")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub dn: String,
    pub photo: bool,
    pub employee_number: Option<String>,
    pub mail: Option<String>,
    pub telephone_number: Option<String>,
    pub mobile: Option<String>,
    pub birthdate: Option<String>,
    pub company_id: Option<i32>,
    pub department_id: Option<i32>,
    pub job_title_id: Option<i32>,
    pub country_id: Option<i32>,
    pub postal_code_id: Option<i32>,
    pub state_id: Option<i32>,
    pub city_id: Option<i32>,
    pub street_address_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::city::Entity",
        from = "Column::CityId",
        to = "super::city::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    City,
    #[sea_orm(
        belongs_to = "super::company::Entity",
        from = "Column::CompanyId",
        to = "super::company::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Company,
    #[sea_orm(
        belongs_to = "super::country::Entity",
        from = "Column::CountryId",
        to = "super::country::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Country,
    #[sea_orm(
        belongs_to = "super::department::Entity",
        from = "Column::DepartmentId",
        to = "super::department::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Department,
    #[sea_orm(
        belongs_to = "super::job_title::Entity",
        from = "Column::JobTitleId",
        to = "super::job_title::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    JobTitle,
    #[sea_orm(
        belongs_to = "super::postal_code::Entity",
        from = "Column::PostalCodeId",
        to = "super::postal_code::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PostalCode,
    #[sea_orm(
        belongs_to = "super::state::Entity",
        from = "Column::StateId",
        to = "super::state::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    State,
    #[sea_orm(
        belongs_to = "super::street_address::Entity",
        from = "Column::StreetAddressId",
        to = "super::street_address::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    StreetAddress,
}

impl Related<super::city::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::City.def()
    }
}

impl Related<super::company::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Company.def()
    }
}

impl Related<super::country::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Country.def()
    }
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::job_title::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JobTitle.def()
    }
}

impl Related<super::postal_code::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostalCode.def()
    }
}

impl Related<super::state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::State.def()
    }
}

impl Related<super::street_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StreetAddress.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
